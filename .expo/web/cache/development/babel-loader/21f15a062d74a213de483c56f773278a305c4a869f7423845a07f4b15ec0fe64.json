{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession } from 'expo-web-browser';\nimport { AuthRequest } from \"./AuthRequest\";\nimport { resolveDiscoveryAsync } from \"./Discovery\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nexport function dismiss() {\n  dismissAuthSession();\n}\nexport var getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\nexport function getRedirectUrl(path) {\n  return sessionUrlProvider.getRedirectUrl({\n    urlPath: path\n  });\n}\nexport function makeRedirectUri() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    native = _ref.native,\n    scheme = _ref.scheme,\n    isTripleSlashed = _ref.isTripleSlashed,\n    queryParams = _ref.queryParams,\n    path = _ref.path,\n    preferLocalhost = _ref.preferLocalhost;\n  if (Platform.OS !== 'web' && native && [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(Constants.executionEnvironment)) {\n    return native;\n  }\n  var url = Linking.createURL(path || '', {\n    isTripleSlashed: isTripleSlashed,\n    scheme: scheme,\n    queryParams: queryParams\n  });\n  if (preferLocalhost) {\n    var ipAddress = url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);\n    if (ipAddress != null && ipAddress.length) {\n      var _url$split = url.split(ipAddress[0]),\n        _url$split2 = _slicedToArray(_url$split, 2),\n        protocol = _url$split2[0],\n        _path = _url$split2[1];\n      return `${protocol}localhost${_path}`;\n    }\n  }\n  return url;\n}\nexport function loadAsync(_x, _x2) {\n  return _loadAsync.apply(this, arguments);\n}\nfunction _loadAsync() {\n  _loadAsync = _asyncToGenerator(function* (config, issuerOrDiscovery) {\n    var request = new AuthRequest(config);\n    var discovery = yield resolveDiscoveryAsync(issuerOrDiscovery);\n    yield request.makeAuthUrlAsync(discovery);\n    return request;\n  });\n  return _loadAsync.apply(this, arguments);\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","dismissAuthSession","AuthRequest","resolveDiscoveryAsync","sessionUrlProvider","dismiss","getDefaultReturnUrl","getRedirectUrl","path","urlPath","makeRedirectUri","_ref","arguments","length","undefined","native","scheme","isTripleSlashed","queryParams","preferLocalhost","OS","Standalone","Bare","includes","executionEnvironment","url","createURL","ipAddress","match","_url$split","split","_url$split2","_slicedToArray","protocol","loadAsync","_x","_x2","_loadAsync","apply","_asyncToGenerator","config","issuerOrDiscovery","request","discovery","makeAuthUrlAsync"],"sources":["D:\\HARBOR\\RAPIFLOW\\node_modules\\expo-auth-session\\src\\AuthSession.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession } from 'expo-web-browser';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig } from './AuthRequest.types';\nimport { AuthSessionRedirectUriOptions } from './AuthSession.types';\nimport { IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\nimport sessionUrlProvider from './SessionUrlProvider';\n\n// @needsAudit\n/**\n * Cancels an active `AuthSession` if there is one.\n */\nexport function dismiss() {\n  dismissAuthSession();\n}\n\nexport const getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\n\n// @needsAudit @docsMissing\n/**\n * Get the URL that your authentication provider needs to redirect to. For example: `https://auth.expo.io/@your-username/your-app-slug`. You can pass an additional path component to be appended to the default redirect URL.\n * > **Note** This method will throw an exception if you're using the bare workflow on native.\n *\n * @param path\n * @return\n *\n * @example\n * ```ts\n * const url = AuthSession.getRedirectUrl('redirect');\n *\n * // Managed: https://auth.expo.io/@your-username/your-app-slug/redirect\n * // Web: https://localhost:19006/redirect\n * ```\n *\n * @deprecated Use `makeRedirectUri()` instead.\n */\nexport function getRedirectUrl(path?: string): string {\n  return sessionUrlProvider.getRedirectUrl({ urlPath: path });\n}\n\n// @needsAudit\n/**\n * Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in\n * a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.\n * - **Web:** Generates a path based on the current `window.location`. For production web apps, you should hard code the URL as well.\n * - **Managed workflow:** Uses the `scheme` property of your app config.\n * - **Bare workflow:** Will fallback to using the `native` option for bare workflow React Native apps.\n *\n * @param options Additional options for configuring the path.\n * @return The `redirectUri` to use in an authentication request.\n *\n * @example\n * ```ts\n * const redirectUri = makeRedirectUri({\n *   scheme: 'my-scheme',\n *   path: 'redirect'\n * });\n * // Development Build: my-scheme://redirect\n * // Expo Go: exp://127.0.0.1:8081/--/redirect\n * // Web dev: https://localhost:19006/redirect\n * // Web prod: https://yourwebsite.com/redirect\n *\n * const redirectUri2 = makeRedirectUri({\n *   scheme: 'scheme2',\n *   preferLocalhost: true,\n *   isTripleSlashed: true,\n * });\n * // Development Build: scheme2:///\n * // Expo Go: exp://localhost:8081\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n */\nexport function makeRedirectUri({\n  native,\n  scheme,\n  isTripleSlashed,\n  queryParams,\n  path,\n  preferLocalhost,\n}: AuthSessionRedirectUriOptions = {}): string {\n  if (\n    Platform.OS !== 'web' &&\n    native &&\n    [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(\n      Constants.executionEnvironment\n    )\n  ) {\n    // Should use the user-defined native scheme in standalone builds\n    return native;\n  }\n  const url = Linking.createURL(path || '', {\n    isTripleSlashed,\n    scheme,\n    queryParams,\n  });\n\n  if (preferLocalhost) {\n    const ipAddress = url.match(\n      /\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/\n    );\n    // Only replace if an IP address exists\n    if (ipAddress?.length) {\n      const [protocol, path] = url.split(ipAddress[0]);\n      return `${protocol}localhost${path}`;\n    }\n  }\n\n  return url;\n}\n\n// @needsAudit\n/**\n * Build an `AuthRequest` and load it before returning.\n *\n * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n * @param issuerOrDiscovery A loaded [`DiscoveryDocument`](#discoverydocument) or issuer URL.\n * (Only `authorizationEndpoint` is required for requesting an authorization code).\n * @return Returns an instance of `AuthRequest` that can be used to prompt the user for authorization.\n */\nexport async function loadAsync(\n  config: AuthRequestConfig,\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<AuthRequest> {\n  const request = new AuthRequest(config);\n  const discovery = await resolveDiscoveryAsync(issuerOrDiscovery);\n  await request.makeAuthUrlAsync(discovery);\n  return request;\n}\n"],"mappings":";;AAAA,OAAOA,SAAS,IAAIC,oBAAoB,QAAQ,gBAAgB;AAChE,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,kBAAkB,QAAQ,kBAAkB;AAErD,SAASC,WAAW;AAGpB,SAA4BC,qBAAqB;AACjD,OAAOC,kBAAkB;AAMzB,OAAM,SAAUC,OAAOA,CAAA;EACrBJ,kBAAkB,EAAE;AACtB;AAEA,OAAO,IAAMK,mBAAmB,GAAGF,kBAAkB,CAACE,mBAAmB;AAoBzE,OAAM,SAAUC,cAAcA,CAACC,IAAa;EAC1C,OAAOJ,kBAAkB,CAACG,cAAc,CAAC;IAAEE,OAAO,EAAED;EAAI,CAAE,CAAC;AAC7D;AAmCA,OAAM,SAAUE,eAAeA,CAAA,EAOM;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;IANnCG,MAAM,GAAAJ,IAAA,CAANI,MAAM;IACNC,MAAM,GAAAL,IAAA,CAANK,MAAM;IACNC,eAAe,GAAAN,IAAA,CAAfM,eAAe;IACfC,WAAW,GAAAP,IAAA,CAAXO,WAAW;IACXV,IAAI,GAAAG,IAAA,CAAJH,IAAI;IACJW,eAAe,GAAAR,IAAA,CAAfQ,eAAe;EAEf,IACEnB,QAAQ,CAACoB,EAAE,KAAK,KAAK,IACrBL,MAAM,IACN,CAACjB,oBAAoB,CAACuB,UAAU,EAAEvB,oBAAoB,CAACwB,IAAI,CAAC,CAACC,QAAQ,CACnE1B,SAAS,CAAC2B,oBAAoB,CAC/B,EACD;IAEA,OAAOT,MAAM;EACf;EACA,IAAMU,GAAG,GAAG1B,OAAO,CAAC2B,SAAS,CAAClB,IAAI,IAAI,EAAE,EAAE;IACxCS,eAAe,EAAfA,eAAe;IACfD,MAAM,EAANA,MAAM;IACNE,WAAW,EAAXA;GACD,CAAC;EAEF,IAAIC,eAAe,EAAE;IACnB,IAAMQ,SAAS,GAAGF,GAAG,CAACG,KAAK,CACzB,oKAAoK,CACrK;IAED,IAAID,SAAS,YAATA,SAAS,CAAEd,MAAM,EAAE;MACrB,IAAAgB,UAAA,GAAyBJ,GAAG,CAACK,KAAK,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;QAAAI,WAAA,GAAAC,cAAA,CAAAH,UAAA;QAAzCI,QAAQ,GAAAF,WAAA;QAAEvB,KAAI,GAAAuB,WAAA;MACrB,OAAO,GAAGE,QAAQ,YAAYzB,KAAI,EAAE;IACtC;EACF;EAEA,OAAOiB,GAAG;AACZ;AAWA,gBAAsBS,SAASA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAAC,KAAA,OAAA1B,SAAA;AAAA;AAQ9B,SAAAyB,WAAA;EAAAA,UAAA,GAAAE,iBAAA,CARM,WACLC,MAAyB,EACzBC,iBAAoC;IAEpC,IAAMC,OAAO,GAAG,IAAIxC,WAAW,CAACsC,MAAM,CAAC;IACvC,IAAMG,SAAS,SAASxC,qBAAqB,CAACsC,iBAAiB,CAAC;IAChE,MAAMC,OAAO,CAACE,gBAAgB,CAACD,SAAS,CAAC;IACzC,OAAOD,OAAO;EAChB,CAAC;EAAA,OAAAL,UAAA,CAAAC,KAAA,OAAA1B,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}