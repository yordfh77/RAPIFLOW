{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Crypto from 'expo-crypto';\nimport invariant from 'invariant';\nvar CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction convertBufferToString(buffer) {\n  var state = [];\n  for (var i = 0; i < buffer.byteLength; i += 1) {\n    var index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\nfunction convertToUrlSafeString(b64) {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\nexport function generateRandom(size) {\n  var buffer = Crypto.getRandomValues(new Uint8Array(size));\n  return convertBufferToString(buffer);\n}\nexport function deriveChallengeAsync(_x) {\n  return _deriveChallengeAsync.apply(this, arguments);\n}\nfunction _deriveChallengeAsync() {\n  _deriveChallengeAsync = _asyncToGenerator(function* (code) {\n    invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n      encoding: Crypto.CryptoEncoding.BASE64\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _deriveChallengeAsync.apply(this, arguments);\n}\nexport function buildCodeAsync() {\n  return _buildCodeAsync.apply(this, arguments);\n}\nfunction _buildCodeAsync() {\n  _buildCodeAsync = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    var codeVerifier = generateRandom(size);\n    var codeChallenge = yield deriveChallengeAsync(codeVerifier);\n    return {\n      codeVerifier: codeVerifier,\n      codeChallenge: codeChallenge\n    };\n  });\n  return _buildCodeAsync.apply(this, arguments);\n}\nexport function generateHexStringAsync(_x2) {\n  return _generateHexStringAsync.apply(this, arguments);\n}\nfunction _generateHexStringAsync() {\n  _generateHexStringAsync = _asyncToGenerator(function* (size) {\n    var value = generateRandom(size);\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n      encoding: Crypto.CryptoEncoding.HEX\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _generateHexStringAsync.apply(this, arguments);\n}","map":{"version":3,"names":["Crypto","invariant","CHARSET","convertBufferToString","buffer","state","i","byteLength","index","length","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","getRandomValues","Uint8Array","deriveChallengeAsync","_x","_deriveChallengeAsync","apply","arguments","_asyncToGenerator","code","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","buildCodeAsync","_buildCodeAsync","undefined","codeVerifier","codeChallenge","generateHexStringAsync","_x2","_generateHexStringAsync","value","HEX"],"sources":["D:\\HARBOR\\RAPIFLOW\\node_modules\\expo-auth-session\\src\\PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = Crypto.getRandomValues(new Uint8Array(size));\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}