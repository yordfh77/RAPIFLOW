{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { collection, addDoc, updateDoc, deleteDoc, doc, getDocs, query, where, orderBy } from 'firebase/firestore';\nimport { db } from \"../config/firebase\";\nvar PRODUCTS_COLLECTION = 'products';\nexport var productService = {\n  getBusinessProducts: function () {\n    var _getBusinessProducts = _asyncToGenerator(function* (businessId) {\n      try {\n        var q = query(collection(db, PRODUCTS_COLLECTION), where('businessId', '==', businessId), orderBy('name'));\n        var querySnapshot = yield getDocs(q);\n        var products = [];\n        querySnapshot.forEach(function (doc) {\n          products.push(_objectSpread({\n            id: doc.id\n          }, doc.data()));\n        });\n        return products;\n      } catch (error) {\n        console.error('Error getting products:', error);\n        throw error;\n      }\n    });\n    function getBusinessProducts(_x) {\n      return _getBusinessProducts.apply(this, arguments);\n    }\n    return getBusinessProducts;\n  }(),\n  addProduct: function () {\n    var _addProduct = _asyncToGenerator(function* (businessId, productData) {\n      try {\n        var docRef = yield addDoc(collection(db, PRODUCTS_COLLECTION), _objectSpread(_objectSpread({}, productData), {}, {\n          businessId: businessId,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }));\n        return docRef.id;\n      } catch (error) {\n        console.error('Error adding product:', error);\n        throw error;\n      }\n    });\n    function addProduct(_x2, _x3) {\n      return _addProduct.apply(this, arguments);\n    }\n    return addProduct;\n  }(),\n  updateProduct: function () {\n    var _updateProduct = _asyncToGenerator(function* (productId, productData) {\n      try {\n        var productRef = doc(db, PRODUCTS_COLLECTION, productId);\n        yield updateDoc(productRef, _objectSpread(_objectSpread({}, productData), {}, {\n          updatedAt: new Date()\n        }));\n      } catch (error) {\n        console.error('Error updating product:', error);\n        throw error;\n      }\n    });\n    function updateProduct(_x4, _x5) {\n      return _updateProduct.apply(this, arguments);\n    }\n    return updateProduct;\n  }(),\n  deleteProduct: function () {\n    var _deleteProduct = _asyncToGenerator(function* (productId) {\n      try {\n        yield deleteDoc(doc(db, PRODUCTS_COLLECTION, productId));\n      } catch (error) {\n        console.error('Error deleting product:', error);\n        throw error;\n      }\n    });\n    function deleteProduct(_x6) {\n      return _deleteProduct.apply(this, arguments);\n    }\n    return deleteProduct;\n  }(),\n  updateProductAvailability: function () {\n    var _updateProductAvailability = _asyncToGenerator(function* (productId, available) {\n      try {\n        var productRef = doc(db, PRODUCTS_COLLECTION, productId);\n        yield updateDoc(productRef, {\n          available: available,\n          updatedAt: new Date()\n        });\n      } catch (error) {\n        console.error('Error updating product availability:', error);\n        throw error;\n      }\n    });\n    function updateProductAvailability(_x7, _x8) {\n      return _updateProductAvailability.apply(this, arguments);\n    }\n    return updateProductAvailability;\n  }(),\n  getAvailableProducts: function () {\n    var _getAvailableProducts = _asyncToGenerator(function* () {\n      try {\n        var q = query(collection(db, PRODUCTS_COLLECTION), where('available', '==', true), orderBy('name'));\n        var querySnapshot = yield getDocs(q);\n        var products = [];\n        querySnapshot.forEach(function (doc) {\n          products.push(_objectSpread({\n            id: doc.id\n          }, doc.data()));\n        });\n        return products;\n      } catch (error) {\n        console.error('Error getting available products:', error);\n        throw error;\n      }\n    });\n    function getAvailableProducts() {\n      return _getAvailableProducts.apply(this, arguments);\n    }\n    return getAvailableProducts;\n  }()\n};\nexport default productService;","map":{"version":3,"names":["collection","addDoc","updateDoc","deleteDoc","doc","getDocs","query","where","orderBy","db","PRODUCTS_COLLECTION","productService","getBusinessProducts","_getBusinessProducts","_asyncToGenerator","businessId","q","querySnapshot","products","forEach","push","_objectSpread","id","data","error","console","_x","apply","arguments","addProduct","_addProduct","productData","docRef","createdAt","Date","updatedAt","_x2","_x3","updateProduct","_updateProduct","productId","productRef","_x4","_x5","deleteProduct","_deleteProduct","_x6","updateProductAvailability","_updateProductAvailability","available","_x7","_x8","getAvailableProducts","_getAvailableProducts"],"sources":["D:/HARBOR/RAPIFLOW/src/services/productService.js"],"sourcesContent":["import { \n  collection, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc, \n  getDocs, \n  query, \n  where, \n  orderBy \n} from 'firebase/firestore';\nimport { db } from '../config/firebase';\n\nconst PRODUCTS_COLLECTION = 'products';\n\nexport const productService = {\n  // Obtener todos los productos de un negocio\n  async getBusinessProducts(businessId) {\n    try {\n      const q = query(\n        collection(db, PRODUCTS_COLLECTION),\n        where('businessId', '==', businessId),\n        orderBy('name')\n      );\n      const querySnapshot = await getDocs(q);\n      const products = [];\n      querySnapshot.forEach((doc) => {\n        products.push({ id: doc.id, ...doc.data() });\n      });\n      return products;\n    } catch (error) {\n      console.error('Error getting products:', error);\n      throw error;\n    }\n  },\n\n  // Agregar un nuevo producto\n  async addProduct(businessId, productData) {\n    try {\n      const docRef = await addDoc(collection(db, PRODUCTS_COLLECTION), {\n        ...productData,\n        businessId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error adding product:', error);\n      throw error;\n    }\n  },\n\n  // Actualizar un producto\n  async updateProduct(productId, productData) {\n    try {\n      const productRef = doc(db, PRODUCTS_COLLECTION, productId);\n      await updateDoc(productRef, {\n        ...productData,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error;\n    }\n  },\n\n  // Eliminar un producto\n  async deleteProduct(productId) {\n    try {\n      await deleteDoc(doc(db, PRODUCTS_COLLECTION, productId));\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  },\n\n  // Actualizar disponibilidad de un producto\n  async updateProductAvailability(productId, available) {\n    try {\n      const productRef = doc(db, PRODUCTS_COLLECTION, productId);\n      await updateDoc(productRef, {\n        available,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating product availability:', error);\n      throw error;\n    }\n  },\n\n  // Obtener productos disponibles de todos los negocios (para clientes)\n  async getAvailableProducts() {\n    try {\n      const q = query(\n        collection(db, PRODUCTS_COLLECTION),\n        where('available', '==', true),\n        orderBy('name')\n      );\n      const querySnapshot = await getDocs(q);\n      const products = [];\n      querySnapshot.forEach((doc) => {\n        products.push({ id: doc.id, ...doc.data() });\n      });\n      return products;\n    } catch (error) {\n      console.error('Error getting available products:', error);\n      throw error;\n    }\n  }\n};\n\nexport default productService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}